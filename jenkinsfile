def autoCancelled = false

pipeline {
  agent any

  parameters {
    choice(name: 'AGENT_TYPE', choices: ['kubernetes-pods', 'ec2'], description: 'Select the Jenkins Agent to run the pipeline.')
  }

  environment {
    APP_IMAGE_NAME = 'python-app-image'
    WEB_IMAGE_NAME = 'web-image'
    DOCKER_COMPOSE_FILE = 'docker-compose.yml'
    BUILD_DATE = new Date().format('yyyyMMdd-HHmmss')
    IMAGE_TAG = "v1.0-${BUILD_NUMBER}-${BUILD_DATE}"
    AWS_ACCOUNT_ID = 'YOUR_AWS_ACCOUNT_ID'
    AWS_REGION = 'YOUR_AWS_REGION'
    ECR_REPOSITORY_APP = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/python-app-repo"
    ECR_REPOSITORY_WEB = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/web-app-repo"
    GIT_CREDENTIALS_ID = 'github'
    AWS_CREDENTIALS_ID = 'aws-ecr-credentials'  // Assuming you have configured AWS credentials in Jenkins
  }

  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(daysToKeepStr: '30'))
    timestamps()
  }

  stages {
    stage('Setup Agent') {
      agent {
        if (params.AGENT_TYPE == 'kubernetes-pods') {
          kubernetes {
            yaml '''
              apiVersion: v1
              kind: Pod
              metadata:
                namespace: alexb-jenkins
              spec:
                containers:
                - name: jenkins-agent
                  image: mecodia/jenkins-kubectl:latest
                  command:
                  - cat
                  tty: true
                - name: docker
                  image: docker:latest
                  command:
                  - cat
                  tty: true
                  volumeMounts:
                   - mountPath: /var/run/docker.sock
                     name: docker-sock
                volumes:
                - name: docker-sock
                  hostPath:
                    path: /var/run/docker.sock
            '''
          }
        } else {
          label 'ec2-fleet'
        }
      }

      steps {
        echo "Running on ${params.AGENT_TYPE} agent."
      }
    }

    stage('Hello') {
      steps {
        wrap([$class: 'BuildUser']) {
          greet()
        }
      }
    }

    stage('Authenticate to AWS ECR') {
      steps {
        container('docker') {
          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDENTIALS_ID}"]]) {
            sh '''
              aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
            '''
          }
        }
      }
    }

    stage('Build Docker Image') {
      when {
        expression { !autoCancelled }
      }
      steps {
        container('docker') {
          sh '''
          /usr/local/bin/docker-compose -f ${DOCKER_COMPOSE_FILE} build
          '''
        }
      }
    }

    stage('Tag and Push To ECR') {
      when {
        expression { !autoCancelled }
      }
      steps {
        container('docker') {
          script {
            def fullWebImageName = "${ECR_REPOSITORY_WEB}:${IMAGE_TAG}"
            def fullAppImageName = "${ECR_REPOSITORY_APP}:${IMAGE_TAG}"
            sh """
              docker tag ${WEB_IMAGE_NAME}:latest ${fullWebImageName}
              docker push ${fullWebImageName}

              docker tag ${APP_IMAGE_NAME}:latest ${fullAppImageName}
              docker push ${fullAppImageName}
            """
          }
        }
      }
    }

    stage('Update Manifests') {
      when {
        expression { !autoCancelled }
      }
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: "${GIT_CREDENTIALS_ID}", usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
            sh """
              git checkout main
              git config --global user.email "alexb853@gmail.com"
              git config --global user.name "alexb853"
              sed -i 's|image: alexb853/web-image:.*|image: ${ECR_REPOSITORY_WEB}:${IMAGE_TAG}|g' k8s/web/web-deployment.yaml
              sed -i 's|image: alexb853/python-app-image:.*|image: ${ECR_REPOSITORY_APP}:${IMAGE_TAG}|g' k8s/app/app-deployment.yaml
              git add k8s/web/web-deployment.yaml
              git add k8s/app/app-deployment.yaml
              git commit -m "Update image to ${IMAGE_TAG} [ci skip]"
              git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/alexb853/KubernetesProject.git
            """
          }
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
    success {
      echo "Build ${BUILD_NUMBER} has succeeded"
    }
    failure {
      echo "Build ${BUILD_NUMBER} has failed"
    }
  }
}
